import numpy as np
import matplotlib.pyplot as plt

# 3 gráficos usando range kutta, modifiquei algumas coisas 

# Definição das constantes
g = 9.81  # Aceleração devido à gravidade (m/s^2)
l = 1.0   # Comprimento do pêndulo (metros)
theta0 = np.pi / 3  # Ângulo inicial em radianos
omega0 = 0.0        # Velocidade angular inicial (rad/s)
tempo_total = 10.0  # Tempo total da simulação (segundos)
passo_tempo = 0.01  # Passo de tempo (segundos)

# Função para calcular a derivada do ângulo theta
def ddt(t, theta, omega):
    return omega

# Função para calcular a derivada da velocidade angular omega
def domega(t, theta, omega):
    return - (g / l) * np.sin(theta)

# Implementação do método de Runge-Kutta de 4ª ordem
def runge_kutta4(t, theta, omega, dt):
    k1_theta = ddt(t, theta, omega)
    k1_omega = domega(t, theta, omega)

    k2_theta = ddt(t + dt/2, theta + k1_theta*dt/2, omega + k1_omega*dt/2)
    k2_omega = domega(t + dt/2, theta + k1_theta*dt/2, omega + k1_omega*dt/2)

    k3_theta = ddt(t + dt/2, theta + k2_theta*dt/2, omega + k2_omega*dt/2)
    k3_omega = domega(t + dt/2, theta + k2_theta*dt/2, omega + k2_omega*dt/2)

    k4_theta = ddt(t + dt, theta + k3_theta*dt, omega + k3_omega*dt)
    k4_omega = domega(t + dt, theta + k3_theta*dt, omega + k3_omega*dt)

    theta_new = theta + (k1_theta + 2*k2_theta + 2*k3_theta + k4_theta) * dt / 6
    omega_new = omega + (k1_omega + 2*k2_omega + 2*k3_omega + k4_omega) * dt / 6

    return theta_new, omega_new

# Listas para armazenar os resultados
tempos = np.arange(0, tempo_total, passo_tempo)
thetas = []
omegas = []

# Condições iniciais
theta = theta0
omega = omega0

# Simulação do movimento do pêndulo usando o método de Runge-Kutta de 4ª ordem
for t in tempos:
    thetas.append(theta)
    omegas.append(omega)
    
    theta, omega = runge_kutta4(t, theta, omega, passo_tempo)

# Plotagem dos resultados
plt.figure(figsize=(15, 5))

# Gráfico do comportamento do ângulo
plt.subplot(1, 3, 1)
plt.plot(tempos, np.degrees(thetas))
plt.xlabel('Tempo (s)')
plt.ylabel('Ângulo (graus)')
plt.title('Comportamento do Ângulo de um Pêndulo Simples')
plt.grid(True)

# Gráfico da órbita do pêndulo
plt.subplot(1, 3, 2)
plt.plot(l * np.sin(thetas), -l * np.cos(thetas))
plt.xlabel('Posição X (m)')
plt.ylabel('Posição Y (m)')
plt.title('Órbita do Pêndulo Simples')
plt.axis('equal')
plt.grid(True)

# Gráfico de fase (theta ponto em relação a theta)
plt.subplot(1, 3, 3)
plt.plot(np.degrees(thetas), omegas)
plt.xlabel('Ângulo (graus)')
plt.ylabel('Velocidade Angular (rad/s)')
plt.title('Gráfico de Fase')
plt.grid(True)

plt.tight_layout()
plt.show()
